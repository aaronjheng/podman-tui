---

env:
    DEST_BRANCH: "main"
    CIRRUS_SHELL: "/bin/bash"

timeout_in: 30m

# Run on PRs and main branch post submit only. Don't run tests when tagging.
only_if: $CIRRUS_TAG == '' && ($CIRRUS_PR != '' || $CIRRUS_BRANCH == 'main')

clone_script: &full_clone |
  if [ -z "$CIRRUS_PR" ]; then
    git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
    git reset --hard $CIRRUS_CHANGE_IN_REPO
  else
    git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
    git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
    git reset --hard $CIRRUS_CHANGE_IN_REPO
  fi

precommit_test_task:
  name: "Precommit"
  alias: precommit
  clone_script: *full_clone
  container:
    image: python:3.10
  script: |
    python3 -m pip install pre-commit
    pre-commit run -a

vendor_task:
  name: "Vendoring"
  alias: vendor
  clone_script: *full_clone
  container:
    image: golang:1.18
  script: |
    go mod tidy
    go mod vendor
    go mod verify
    bash ./hack/tree_status.sh

gofmt_task:
  name: "Gofmt"
  alias: gofmt
  clone_script: *full_clone
  container:
    image: golang:1.18
  script: |
    SRC=$(find . -type f -name '*.go' -not -path "./vendor/*")
    gofmt -w ${SRC}

golangci_lint_task:
  name: "Golangci-lint"
  alias: lint
  clone_script: *full_clone
  container:
    image: golang:1.18
  script: |
    make .install.golangci-lint
    make lint

goreport_task:
  name: "Go Report Card"
  alias: goreport
  clone_script: *full_clone
  container:
    image: golang:1.18
  script: |
    bash hack/goreportcard.sh

unit_tests_task:
  name: "Unit Tests"
  alias: unit_tests
  clone_script: *full_clone
  depends_on:
    - precommit
    - vendor
    - gofmt
    - lint
    - goreport
  container:
    image: golang:1.18
  script: |
    go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo@v2.1.4
    $GOPATH/bin/ginkgo \
      -r \
      --skip-package test/ \
      --cover \
      --covermode atomic \
      --coverprofile coverprofile \
      --output-dir .coverage \
      --succinct
    go tool cover -html=.coverage/coverprofile -o .coverage/coverage.html
    go tool cover -func=.coverage/coverprofile > .coverage/functions
    cat .coverage/functions | sed -n 's/\(total:\).*\([0-9][0-9].[0-9]\)/\1 \2/p'

build_package_task:
  name: "Binaries and RPM Package"
  clone_script: |
    dnf -y install git-core
    if [ -z "$CIRRUS_PR" ]; then
      git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi

  container:
    image: fedora:36
  script: |
    sh hack/install_dep.sh
    rpkg local
    rpm -ivh /tmp/rpkg/podman-tui-*/x86_64/podman-tui-*.x86_64.rpm
    rpm -qi podman-tui
    mv /tmp/rpkg/podman-tui-*/x86_64/podman-tui-*.x86_64.rpm ./
    make all
    mv bin/podman-tui ./podman-tui-linux
    mv bin/darwin/podman-tui ./podman-tui-darwin
    mv bin/windows/podman-tui.exe ./podman-tui-windows.exe
  always:
    binary_artifacts:
      path: "*podman-tui*"
      type: application/octet-stream
